from typing import TypedDict, Annotated, List, Dict, Any
from pydantic import BaseModel # Import BaseModel for nested Pydantic models

# Forward reference for models defined later
class ThreatIntel(BaseModel): ...
class LogAnalysis(BaseModel): ...
class FirewallRule(BaseModel): ...


class GraphState(TypedDict):
    """
    Represents the state of our security investigation graph.

    Attributes:
        alert: The initial security alert.
        indicator: The data being investigated.
        intel: Threat intelligence from the Threat_Analyst.
        investigation_trace: A log of the steps taken.
        next_node: The supervisor's routing decision.
        logs: Raw logs for analysis.
        log_summary: The summary from the Log_Analyst.
        policy: The security policy generated by the Policy_Agent.
    """
    alert: Dict[str, Any]
    indicator: str
    intel: Any
    investigation_trace: Annotated[List[str], lambda x, y: x + y]
    next_node: str
    logs: str
    log_summary: Any
    policy: Any # Will hold our FirewallRule